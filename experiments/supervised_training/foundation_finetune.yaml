trainer:
  _target_: pytorch_lightning.Trainer
  benchmark: True
  max_epochs: 1
  check_val_every_n_epoch: 5
  accelerator: gpu
  devices: 1
  # sync_batchnorm: True
  # precision: 16
  log_every_n_steps: 1
  logger: False

  callbacks:
    - _target_: pytorch_lightning.callbacks.ModelCheckpoint
      dirpath:  ./checkpoints
      verbose: True
      save_last: True
      every_n_epochs: 1
      save_on_train_epoch_end: True

    - _target_: lighter.callbacks.LighterLogger
      project: fmcib
      log_dir: ./logs
      tensorboard: False
      wandb: True
      input_type: image
      pred_type: histogram
      max_samples: 10

system:
    _target_: lighter.LighterSystem
    batch_size: 32
    pin_memory: True
    drop_last_batch: True 
    num_workers: 6
    model:
        _target_: fmcib.models.LoadPretrainedModel
        trunk:
          _target_: monai.networks.nets.resnet50
          widen_factor: 2
          n_input_channels: 1
          feed_forward: False
        weights_path: "./fmcib.torch" 
        heads:  [4096, 2048, 512, 256, 1] # Note: Change to [4096, 2048, 1] for Task 2 and [4096, Task 3


    post_criterion_activation: "$torch.sigmoid" # Note: Change to $torch.sigmoid for Task 2 and Task 3
    cast_target_dtype_to: "$torch.float32" # Note: Uncomment for Task 2 and Task 3

    criterion:
        _target_: torch.nn.BCEWithLogitsLoss # Note: Change to torch.nn.BCEWithLogitsLoss for Task 2 and Task 3

    optimizers:
        _target_: torch.optim.SGD
        params: "$@system#model.parameters()"
        lr: "$((@system#batch_size * @trainer#devices)/256) * 0.1" # Compute LR dynamically for different batch sizes
        weight_decay: 0.0
        momentum: 0.9

    schedulers:
      scheduler:
        _target_: torch.optim.lr_scheduler.StepLR
        optimizer: "@system#optimizers"
        step_size: 30
      strict: True

    train_metrics: 
        - _target_: torchmetrics.AveragePrecision
          task: binary
          # num_classes: 8 # Note: Change to `binary` for Task 2 and Task 3 and remove num_classes below

        - _target_: torchmetrics.AUROC
          task: binary # Note: Change to `binary` for Task 2 and Task 3 and remove num_classes below
          # num_classes: 8 


    val_metrics: "%system#train_metrics"
    test_metrics: "%system#train_metrics"

    train_dataset:
        _target_: fmcib.datasets.SSLRadiomicsDataset
        path: null # Note: Change path
        label: "survival" # Note: Change to "malignancy" for Task 2 and "survival" for Task 3
        radius: 25
        orient: False # Note: Set orient to False for task 2 and task 3
        resample_spacing: [1, 1, 1]
        enable_negatives: False
        transform:
            _target_: monai.transforms.Compose
            transforms:
                - _target_: monai.transforms.ToTensor
                - _target_: monai.transforms.AddChannel
                - _target_: monai.transforms.SpatialPad
                  spatial_size: [50, 50, 50]
                - _target_: monai.transforms.RandGaussianSmooth
                  prob: 0.5
                - _target_: monai.transforms.RandAffine
                  prob: 0.5
                  translate_range: [10, 10, 10]
                - _target_: monai.transforms.RandAxisFlip
                  prob: 0.5
                - _target_: monai.transforms.RandRotate90
                  prob: 0.5
                - _target_: monai.transforms.NormalizeIntensity
                  subtrahend: -1024
                  divisor: 3072

    val_dataset:
        _target_: fmcib.datasets.SSLRadiomicsDataset
        path: null # Note: Change path
        label: "@system#train_dataset#label"
        radius: "@system#train_dataset#radius"
        orient: "@system#train_dataset#orient"
        resample_spacing: "@system#train_dataset#resample_spacing"
        enable_negatives: "@system#train_dataset#enable_negatives"
        transform:
            _target_: monai.transforms.Compose
            transforms:
                - _target_: monai.transforms.ToTensor
                - _target_: monai.transforms.AddChannel
                - _target_: monai.transforms.SpatialPad
                  spatial_size: [50, 50, 50]
                - _target_: monai.transforms.NormalizeIntensity
                  subtrahend: -1024
                  divisor: 3072
                  
    test_dataset: null